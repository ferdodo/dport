name: release-automation

on:
  push:
    tags:
      - "v*"

jobs:
  build-windows-tauri:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: install node_modules
        working-directory: app
        run: npm install

      - name: setup tauri
        working-directory: app
        run: ./scripts/tauri-setup.bat

      - name: build app 
        working-directory: app
        run: npm run build-tauri

      - name: Upload windows installer.
        uses: actions/upload-artifact@v1
        with:
          name: windows-tauri-msi
          path: app/src-tauri/target/release/bundle/msi/dport_${{ github.ref }}_x64.msi


  build-windows-electron:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: install node_modules
        working-directory: app
        run: npm install

      - name: build electron main process
        working-directory: app
        run: npm run build-electron-main

      - name: build app 
        working-directory: app
        run: npm run build-electron

      - name: Upload windows installer.
        uses: actions/upload-artifact@v1
        with:
          name: windows-electron-msi
          path: app/dist/dport.msi


  build-linux-tauri:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: get appimage
        working-directory: docker
        run: make tauri_get_appimage

      - name: get deb 
        working-directory: docker
        run: make tauri_get_deb

      - name: Upload deb
        uses: actions/upload-artifact@v1
        with:
          name: linux-tauri-deb
          path: /tmp/dport.deb

      - name: Upload appimage
        uses: actions/upload-artifact@v1
        with:
          name: linux-tauri-appimage
          path: /tmp/dport.AppImage

  build-linux-electron:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: get appimage
        working-directory: docker
        run: make electron_get_appimage

      - name: get deb 
        working-directory: docker
        run: make electron_get_deb

      - name: Upload deb
        uses: actions/upload-artifact@v1
        with:
          name: linux-electron-deb
          path: /tmp/dport.deb

      - name: Upload appimage
        uses: actions/upload-artifact@v1
        with:
          name: linux-electron-appimage
          path: /tmp/dport.AppImage

  do-release:
    needs:
      - build-linux-tauri
      - build-windows-electron
      # - build-windows

    runs-on: ubuntu-latest

    steps:
      - name: Download deb
        uses: actions/download-artifact@v1
        with:
          name: linux-tauri-deb

      - name: Download appimage
        uses: actions/download-artifact@v1
        with:
          name: linux-tauri-appimage

      - name: Download windows msi installer.
        uses: actions/download-artifact@v1
        with:
          name: windows-electron-msi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload linux deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux-tauri-deb/dport.deb
          asset_name: dport-${{ github.ref }}.deb
          asset_content_type: application/octet-stream

      - name: Upload linux appimage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux-tauri-appimage/dport.AppImage
          asset_name: dport-${{ github.ref }}.AppImage
          asset_content_type: application/octet-stream

      - name: Upload windows msi
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-electron-msi/dport.msi
          asset_name: dport-${{ github.ref }}-windows.msi
          asset_content_type: application/octet-stream